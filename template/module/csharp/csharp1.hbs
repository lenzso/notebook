<div class="u-col">
    <div class="u-block">
        <h3>数据<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 数据类型</h4>
            <ul>
                <li>
                    <a href="">None</a>None
                    <span>
                        空值
                    </span>
                </li>
                <li>
                    <a href="">int</a>
                    <span>
                        整数，支持16进制，0xff00
                    </span>
                </li>
                <li>
                    <a href="">float</a>1.23e-5
                    <span>
                        1.23e9，1.23e-5
                    </span>
                </li>
                <li>
                    <a href="">bool</a>True / False
                    <span>
                        True / False <br>
                        区分大小写 <br>
                        在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。
                    </span>
                </li>
                <li>
                    <a href="">complex</a>3+4j
                    <span>
                    </span>
                </li>
                <li>
                    <a href="">string</a>'str'
                    <span>
                        字符串用单引号(')或双引号(")括起来，同时使用反斜杠(\)转义特殊字符。<br>
                        Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。<br>
                        索引值以 0 为开始值，-1 为从末尾的开始位置。 <br>
                        字符串截取：变量[头下标:尾下标]，不包含最后位置 <br>
                        加号 (+) 是字符串的连接符 <br>
                        星号 (*) 表示复制当前字符串 
                        <pre><code data-language="python">
                        str = 'ABCDEFG'
                        print (str)          # 输出字符串
                        print (str[0:-1])    # 输出第一个个到倒数第二个的所有字符
                        print (str[0])       # 输出字符串第一个字符
                        print (str[2:5])     # 输出从第三个开始到第五个的字符
                        print (str[2:])      # 输出从第三个开始的后的所有字符
                        print (str * 2)      # 输出字符串两次
                        print (str + "TEST") # 连接字符串
                        </code></pre>
                    </span>
                </li>
                <li>
                    <a href="">tuple</a>(1,'a')
                    <span>
                        元组（tuple）与列表类似，不同之处：<br>
                        1.元组的元素不能修改 <br>
                        2.元组写在小括号()里 <br>
                        3.空元组 tup1 = () <br>
                        4.一个元素，需要在元素后添加逗号 tup2 = (20,) 否则非元组，而是单元素<br>
                        5.tuple的元素不可改变，但它可以包含可变的对象，比如list列表。
                    </span>
                </li>
                <li>
                    <a href="">list</a>[1,'a']
                    <span>
                        列表是写在方括号[]之间、用逗号分隔开的元素列表。<br>
                        List中的元素是可以改变的。<br>
                        索引值以 0 为开始值，-1 为从末尾的开始位置。 <br>
                        列表截取：变量[头下标:尾下标]，不包含最后位置 <br>
                        加号 (+) 是字符串的连接符 <br>
                        星号 (*) 表示复制当前字符串
                        <pre><code data-language="python">
                        list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]
                        tinylist = [123, 'runoob']

                        print (list)            # 输出完整列表
                        print (list[0])         # 输出列表第一个元素
                        print (list[1:3])       # 从第二个开始输出到第三个元素
                        print (list[2:])        # 输出从第三个元素开始的所有元素
                        print (tinylist * 2)    # 输出两次列表
                        print (list + tinylist) # 连接列表
                        </code></pre>
                    </span>
                </li>
                <li>
                    <a href="">set</a>{'a','b'}/set('aabc')
                    <span>
                        集合（set）是一个无序不重复元素的序列。基本功能是进行成员关系测试和删除重复元素。<br>
                        可以使用大括号({})或者 set()函数创建集合。<br>
                        创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。<br>
                        使用set()时最多传入1个参数。
                        <hr>
                        <table>
                            <tr>
                                <th>运算符</th>
                                <th>结果</th>
                            </tr>
                            <tr>
                                <td>-</td>
                                <td>前者存在后者不存在</td>
                            </tr>
                            <tr>
                                <td>^</td>
                                <td>不同时存在的元素</td>
                            </tr>
                            <tr>
                                <td>|</td>
                                <td>并集</td>
                            </tr>
                            <tr>
                                <td>&</td>
                                <td>交集</td>
                            </tr>
                            
                        </table>
                    </span>
                </li>
                <li>
                    <a href="">dictionary</a>{'k':'v'}/dict()
                    <span>
                        列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。键(key)必须使用不可变类型。在同一个字典中，键(key)必须是唯一的。<br>
                        内置函数：clear()清空、keys()键组、values()值组。
                        <pre><code data-language="python">
                        tinydict = {'name': 'test','code':1, 'site': 'www.test.com'}
                        print (tinydict.keys())   # 输出所有键
                        #tinydict_keys(['name', 'site', 'code'])
                        print (tinydict.values()) # 输出所有值
                        #tinydict_values(['test', 'www.test.com', 1])
                        </code></pre>
                        构造函数 dict() 可以直接从键值对序列中构建字典如下：
                        <pre><code data-language="python">
                        >>> dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])
                        {'Taobao': 3, 'Runoob': 1, 'Google': 2}

                        >>> dict(Runoob=1, Google=2, Taobao=3)
                        {'Taobao': 3, 'Runoob': 1, 'Google': 2}

                        >>> {x: x**2 for x in (2, 4, 6)}
                        {2: 4, 4: 16, 6: 36}
                        </code></pre>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 类型检测</h4>
            <ul>
                <li>
                    <a href="">type</a>(var)
                    <span>
                        查询变量所指的对象类型
                    </span>
                </li>
                <li>
                    <a href="">isinstance</a>(var,$type)
                    <span>
                        判断变量所指的对象类型 <br>
                        isinstance(a, int) <br>
                        type()不会认为子类是一种父类类型。isinstance()会认为子类是一种父类类型。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 类型转换</h4>
            <ul>
            	<li>
            		<a href="">int</a>(x [,base])
            		<span>将x转换为一个整数</span>
            	</li>
            	<li>
            		<a href="">float</a>(x)
            		<span>将x转换到一个浮点数</span>
            	</li>
            	<li>
            		<a href="">bool</a>(x)
            		<span>将x转换到布尔值</span>
            	</li>
            	<li>
            		<a href="">complex</a>(real [,imag])
            		<span>
            			创建一个复数 <br>
						complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。<br>
						complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。
            		</span>
            	</li>
            	<li>
            		<a href="">str</a>(x)
            		<span>将对象 x 转换为字符串</span>
            	</li>
            	<li>
            		<a href="">repr</a>(x)
            		<span>将对象 x 转换为表达式字符串</span>
            	</li>
            	<li>
            		<a href="">eval</a>(str)
            		<span>用来计算在字符串中的有效Python表达式,并返回一个对象</span>
            	</li>
            	<li>
            		<a href="">tuple</a>(s)
            		<span>将序列 s 转换为一个元组</span>
            	</li>
            	<li>
            		<a href="">list</a>(s)
            		<span>将序列 s 转换为一个列表</span>
            	</li>
            	<li>
            		<a href="">set</a>(s)
            		<span>转换为可变集合</span>
            	</li>
            	<li>
            		<a href="">frozenset</a>(s)
            		<span>转换为不可变集合</span>
            	</li>
            	<li>
            		<a href="">dict</a>(d)
            		<span>创建一个字典。d 必须是一个序列 (key,value)元组。</span>
            	</li>
            	<li>
            		<a href="">chr</a>(x)
            		<span>将一个整数转换为Unicode字符</span>
            	</li>
            	<li>
            		<a href="">ord</a>(x)
            		<span>将一个字符转换为它的整数值（只能传入1个字符）</span>
            	</li>
            	<li>
            		<a href="">hex</a>(x)
            		<span>将一个整数转换为一个十六进制字符串，生成的是字符串</span>
            	</li>
            	<li>
            		<a href="">oct</a>(x)
            		<span>将一个整数转换为一个八进制字符串</span>
            	</li>
            </ul>
            <h4>[<span>-</span>] 数据属性</h4>
            <ul>
            	<li>
            		data<a href="">.clear()</a>
            		<span>
            			清空
            		</span>
            	</li>
            	<li>
            		data<a href="">.keys()</a>
            		<span>
            			键组
            		</span>
            	</li>
            	<li>
            		data<a href="">.values()</a>
            		<span>
            			值组
            		</span>
            	</li>
                <li>
                    dict<a href="">.items()</a>
                    <span>
                        键值对
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 对象操作</h4>
			<ul>
				<li>
                    <a href="">del</a>var1,var2
                    <span>
                        通过使用del语句删除单个或多个对象
                    </span>
                </li>
			</ul>

            
        </div>
    </div>
</div>